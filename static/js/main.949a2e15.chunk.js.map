{"version":3,"sources":["components/dashboard/Header.js","components/dashboard/CurrentWeather.js","components/dashboard/forecast/DailyForecastCard.js","components/dashboard/forecast/DailyForecastList.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","text","onChange","e","setState","target","value","onSubmit","preventDefault","props","searchCity","getDailyForecast","className","style","color","this","type","placeholder","Component","CurrentWeather","weatherData","position","name","main","temp_max","temp_min","parseInt","temp","alt","src","weather","icon","DailyForecastCard","forecast","paddingBottom","width","textAlign","dt_txt","DailyForecastList","dailyForecastData","list","map","fc","i","key","Dashboard","App","loading","a","Axios","get","result","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.949a2e15.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n    state = {\r\n        text: ''\r\n    }\r\n    onChange = (e) => {\r\n      this.setState({ text: e.target.value });\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.text !== \"\") {\r\n            this.props.searchCity(this.state.text);\r\n            this.props.getDailyForecast(this.state.text);\r\n     }\r\n    }\r\n    render() {\r\n        return (\r\n            <nav className=\"header navbar navbar-dark bg-dark\" style={{ color: \"#fff\" }}>\r\n                <div className=\"container\">\r\n                    <div className=\"brand\">\r\n                        <i className=\"brand-icon fa fa-sun-o fa-2x\"></i>\r\n                        <span className=\"brand-text\">Weather</span>\r\n                    </div>\r\n                    <form onSubmit={this.onSubmit} className=\"search-center\">\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"City\" onChange={this.onChange} value={this.state.text} />\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Search City</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const CurrentWeather = ({ weatherData }) => {\r\n    return (\r\n        <div className=\"current-weather-display\" style={{ position: 'relative' }}>\r\n            <div className=\"weather-location\">{weatherData.name}</div>\r\n            <div className=\"weather-min-max-temp\">{weatherData.main.temp_max}&deg; | {weatherData.main.temp_min}&deg;</div>\r\n            <div className=\"weather-current\">\r\n                <span className=\"weather-temp\">{parseInt(weatherData.main.temp)} &deg;&nbsp;<sup>c</sup></span>\r\n            </div>\r\n            <div className=\"weather-condition\">\r\n                <img className=\"weather-icon\" alt=\"\" src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} />\r\n                <span className=\"weather-description\">{weatherData.weather[0].main}</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const DailyForecastCard = ({ forecast }) => (\r\n    <div className=\"col-sm-12 col-md-6 col-lg-4 \" style={{paddingBottom:'10px'}}>\r\n        <div className=\"card\" style={{width:\"100%\", textAlign: 'center'}}>\r\n            {/* <img src=\"...\" className=\"card-img-top\" alt=\"...\"></img> */}\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{forecast.dt_txt}</h5>\r\n                <p className=\"card-text\">\r\n                    {parseInt(forecast.main.temp_max)}&deg; |\r\n            &nbsp;{parseInt(forecast.main.temp_min)}&deg;\r\n        </p>\r\n                <img src={`http://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`} alt=\"\" />\r\n                <p>{forecast.weather[0].main}</p>\r\n            </div>\r\n            </div>\r\n            </div>\r\n);\r\n\r\n\r\nexport default DailyForecastCard","import React from 'react'\r\nimport DailyForecastCard from './DailyForecastCard'\r\n\r\nexport const DailyForecastList = ({ dailyForecastData }) => {\r\n    return (\r\n        <div className=\"row\">\r\n\r\n            {\r\n                !!dailyForecastData && dailyForecastData.list.map((fc, i) => (\r\n\r\n                    <DailyForecastCard forecast={fc} key={i} />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { CurrentWeather } from './CurrentWeather'\r\nimport { DailyForecastList } from './forecast/DailyForecastList'\r\n\r\nexport const Dashboard = ({ weatherData, dailyForecastData }) => {\r\n    return (\r\n        <div>\r\n            <CurrentWeather weatherData={weatherData} />\r\n            <DailyForecastList dailyForecastData={dailyForecastData} />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport { Header } from './components/dashboard/Header';\nimport { Dashboard } from './components/dashboard/Dashboard';\n\nclass App extends Component {\n  state = {\n    weatherData: null,\n    loading: false,\n    dailyForecastData: null\n  }\n  async componentDidMount() {\n    let result = await Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=bf5b518d43427be14221c96fecf1e3c2`);\n    this.setState({ weatherData: result.data })\n  }\n  searchCity = async text => {\n   let result = await Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${text}&units=metric&APPID=bf5b518d43427be14221c96fecf1e3c2`);\n    this.setState({ weatherData: result.data })\n  }\n  getDailyForecast = async text => {\n   let result = await Axios.get(`http://api.openweathermap.org/data/2.5/forecast?q=${text}&units=metric&APPID=bf5b518d43427be14221c96fecf1e3c2`);\n    this.setState({ dailyForecastData: result.data })\n  }\n  render() {\n    const { weatherData, dailyForecastData } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          <Header searchCity={this.searchCity} getDailyForecast={this.getDailyForecast} />\n          {weatherData && dailyForecastData && <Dashboard weatherData={weatherData} dailyForecastData={dailyForecastData} />}\n        </div>\n      </div>\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}